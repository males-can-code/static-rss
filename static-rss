#!/usr/bin/python3

import os,sys
import feedparser
import hashlib
import sqlite3
import shutil
from log import Log
from time import strftime
from string import Template
from config import Config


class GenerateHTML(object):
    def get_files(self, path):
        for path,dirs,files in os.walk(path):
            return files


    def check_dir(self, directory):
        if not os.path.exists(directory):
            try:
                os.makedirs(directory)
                return True
            except IOError as e:
                self.log.error('Failed to create dir: %s'%directory)
                sys.exit()
        else:
            return True


    def check_file(self, filename):
        try:
            with open(filename) as f: pass
            return True
        except IOError as e:
            self.log.info('Failed to open file: %s'%filename)
            return False
        

    def get_file(self, filename):
        contents = []
        if self.check_file(filename):
            try:
                f = open(filename, 'r')
            except IOError as e:
                self.log.info('Failed to open file: %s'%filename)
                return False

            for line in f:
                contents.append(self.sanitize(line))
            f.close()
            return contents
        else:
            return False
            

    def write_to_file(self, path, data):
        try:
            with open(path, 'w') as f:
                f.write(data)
        except IOError:
            self.log.error('Failed to write to file: %s'%path)


    def parse_template(self, template_path, data):
    # Parse a template file and return a string
        filled_template = ''
        template = self.get_file(template_path)

        if template:
            for line in template:
                for key in data.keys():
                    if '$' + key in line:
                        line = Template(line).safe_substitute({key:data[key]})
                filled_template = filled_template + line + '\n'

        return filled_template


    def generate_feed_urls(self, feeds):
        filled_template = ''
        feed_url = {}

        for group in self.get_groups():
            feeds = self.get_rows_by_value('feeds', 'groups',  group)
            filled_group_template = self.parse_template(self.config.path_template_group, {'group_title' : group})
            filled_template = filled_template + filled_group_template + '\n'
        
            for feed in feeds:
                # Count unread entries per feed
                entries = self.get_rows_by_value('entries', 'feed_hash', feed['hash']) 
                unread_counter = 0
                for entry in entries:
                    if entry['read'] == 'False':
                        unread_counter = unread_counter + 1

                feed_url['title'] = feed['title'] 
                feed_url['feed_url']= self.config.path_export_html + '/feeds/' + feed['hash'] + '/page_1.html'
                feed_url['counter'] = unread_counter

                # Parse template
                if unread_counter > 0:
                    filled_url_template = self.parse_template(self.config.path_template_feed_list_unread, feed_url)
                else:
                    filled_url_template = self.parse_template(self.config.path_template_feed_list_read, feed_url)

                filled_template = filled_template + filled_url_template + '\n'

        return filled_template


    def generate_entries(self, feed, page):
        filled_entries_template = ''
        entries = self.get_rows_by_value('entries', 'feed_hash', feed['hash']) 
        for entry in entries:
            for hash in page:
                if hash == entry['hash']:
                    # Use different template for read/unread entries
                    if entry['read'] == 'True':
                        filled_entry_template = self.parse_template(self.config.path_template_entry_read, entry)
                    elif entry['read'] == 'False':
                        filled_entry_template = self.parse_template(self.config.path_template_entry_unread, entry)
                    filled_entries_template = filled_entries_template + filled_entry_template + '\n'

        return filled_entries_template


    def generate_entry_list(self, feed):
        titles = ''
        title = {}
        pages = self.calculate_pages(feed)
        entries = self.get_rows_by_value('entries', 'feed_hash', feed['hash'], limit=self.config.max_entries_in_sidebar) 

        for entry in entries:
            page_count = 1
            for page in pages:
                if entry['hash'] in page:
                    entry['entry_url'] = self.config.path_export_html + '/feeds/' + feed['hash'] + '/page_' + str(page_count) + '.html' 
                page_count = page_count + 1

            if entry['read'] == 'True':
                filled_template = self.parse_template(self.config.path_template_entry_list_read, entry)
            else:
                filled_template = self.parse_template(self.config.path_template_entry_list_unread, entry)
            titles = titles + filled_template + '\n'
        return titles


    def generate_page_links(self, feed_hash, n_pages):
        page_links = ''
        for x in range(1,n_pages + 1):
            link = {}
            link['page_url'] = self.config.path_export_html + '/feeds/' + feed_hash + '/page_' + str(x) + '.html'
            link['page'] = x
            filled_template = self.parse_template(self.config.path_template_page_link, link)
            page_links = page_links + filled_template + '\n'
        return page_links


    def generate_prev_link(self, pages, feed, cur_page):
        if cur_page == len(pages):
            return self.config.path_export_html + '/feeds/' + feed['hash'] + '/page_' + str(cur_page - 1) + '.html'
        elif cur_page > 0:
            return self.config.path_export_html + '/feeds/' + feed['hash'] + '/page_' + str(cur_page) + '.html'


    def generate_next_link(self, pages, feed, cur_page):
        if cur_page == len(pages):
            return self.config.path_export_html + '/feeds/' + feed['hash'] + '/page_' + str(cur_page) + '.html'
        elif cur_page > 0:
            return self.config.path_export_html + '/feeds/' + feed['hash'] + '/page_' + str(cur_page + 1) + '.html'


    def calculate_pages(self, feed):
        sum_chars = 0
        entry_hash_list = []
        pages = []
        c = 1

        entries = self.get_rows_by_value('entries', 'feed_hash', feed['hash']) 
        for entry in entries:
            sum_chars = sum_chars + len(entry['content'])
            entry_hash_list.append(entry['hash'])
            if sum_chars >= self.config.max_chars_per_page or c == len(entries):
                pages.append(entry_hash_list)
                entry_hash_list = []
                sum_chars = 0
            c = c + 1
                
        return pages


    def generate_HTML(self):
        self.log.info('Generating HTML')

        shutil.rmtree(self.config.path_export_html)
        self.check_dir(self.config.path_export_html)
        self.check_dir(self.config.path_export_html + '/feeds')

        feeds = self.get_table('feeds')

        # This is the main content for the 'feed.html' template which will be generated for
        # every page of every feed 
        feed_template = {}
        feed_template['css'] = self.config.path_css
        feed_template['update_interval'] = self.config.update_interval
        feed_template['favicon'] = self.config.path_favicon
        feed_template['feed_urls'] = self.generate_feed_urls(feeds)
        feed_template['domain'] = self.config.domain

        for feed in feeds:
            pages = self.calculate_pages(feed)
            feed_template['page_links'] = self.generate_page_links(feed['hash'], len(pages))
            feed_template['entry_list'] = self.generate_entry_list(feed)
            feed_template['title'] = feed['title']

            page_count = 1
            for page in pages:
                feed_template['page_next'] = self.generate_next_link(pages, feed, page_count)
                feed_template['page_prev'] = self.generate_prev_link(pages, feed, page_count)
                feed_template['content'] = self.generate_entries(feed, page)

                filled_feed_template = self.parse_template(self.config.path_template_feed, feed_template)

                self.check_dir(self.config.path_export_html + '/feeds/' + feed['hash'])

                self.write_to_file('%s/feeds/%s/page_%s.html' %(self.config.path_export_html, feed['hash'], str(page_count)), filled_feed_template)

                # First feed, first page will be index.html
                if feed == feeds[0] and page_count == 1:
                    self.write_to_file(self.config.path_export_html + '/index.html', filled_feed_template)

                page_count = page_count + 1



class Database(object):
    def create_tables(self): 
        db = sqlite3.connect( self.config.path_db)
        db.execute("create table if not exists feeds (hash          text    unique  ,"
                                                     "title         text            ,"
                                                     "date_entered  text            ,"
                                                     "feed_url      text            ,"
                                                     "icon_url      text            ,"
                                                     "last_updated  text            ,"
                                                     "groups        text            )")

        db.execute("create table if not exists entries (hash          text    unique  ,"
                                                        "content      text            ,"
                                                        "entry_url    text            ,"
                                                        "title        text            ,"
                                                        "read         text            ,"
                                                        "date_entered text            ,"
                                                        "date_published text            ,"
                                                        "feed_hash    text            )")
        db.commit()
        db.close()


    def get_table(self, table, order_by='ROWID'):
    # Spits out the complete table into a list of dictionaries
        db = sqlite3.connect(self.config.path_db)
        rows = []
        cols = []
        table_export = []

        for row in db.execute('select * from %s order by %s'%(table,order_by)):
            rows.append(row)

        for row in db.execute('PRAGMA table_info(%s)'%table):
            cols.append(row[1])

        for row in rows:
            row_export = {}
            for x in range(0,len(cols)):
                row_export[cols[x]] = row[x]
            table_export.append(row_export)

        db.close()
        return table_export


    def get_rows_by_value(self, table, col, value, order_by='date_entered', limit='all'):
        db = sqlite3.connect(self.config.path_db)
        rows = []
        cols = []
        rows_export = []
        if limit == 'all':
            for row in db.execute('select * from %s where "%s" is "%s" order by "%s" desc'%(table, col, value, order_by)):
                rows.append(row)
        else:
            for row in db.execute('select * from %s where "%s" is "%s" order by "%s" desc limit %s'%(table, col, value, order_by, limit)):
                rows.append(row)

        for row in db.execute('PRAGMA table_info(%s)'%table):
            cols.append(row[1])

        for row in rows:
            row_export = {}
            for x in range(0,len(cols)):
                row_export[cols[x]] = row[x]
            rows_export.append(row_export)

        db.close()
        return rows_export


    def insert_row(self, table, row):
        db = sqlite3.connect(self.config.path_db)
        values = []
        for key in row:
            values.append(row[key])
        keys = ','.join(row.keys())
        query = 'INSERT INTO %s(%s) VALUES(%s)'%(table, keys, ','.join(['?'] * len(row)))
        try:
            db.execute(query,values)
            db.commit()
            db.close()
        except:
            self.log.error('Failed to insert row')
            db.close()


    def update_row(self, table, field, string, hash):
        db = sqlite3.connect(self.config.path_db)
        db.execute('update %s set "%s" = "%s" where "%s"'%(str(table), str(field), str(string), str(hash)))
        db.commit()
        db.close()


    def check_in_table(self, table, col, value):
        db = sqlite3.connect(self.config.path_db)
        for data in db.execute('select * from "%s" where "%s" = "%s"'%(str(table),str(col),str(value))):
            if data:
                db.close()
                return True
        db.close()
        return False
        


class RSS(Database, GenerateHTML):
    def __init__(self):
        self.feeds = {}     # Contains feeds: key: hashed url, value: parsed feed object
        self.log = Log()
        self.config = Config()


    def get_timestamp(self):
        timestamp = strftime("%Y%m%d%H%M%S")
        return timestamp


    def get_hash(self, data):
        data = self.sanitize(data)
        data = self.encode(data)
        hashed = hashlib.sha224(data).hexdigest()
        return hashed


    def get_groups(self):
        group_list = []
        feeds = self.get_table('feeds')
        for feed in feeds:
            if feed['groups'] not in group_list:
                group_list.append(feed['groups'])
        return group_list


    def parse_feed(self, url):
        self.log.info('Parsing: %s'%url)
        try:
            parsed_feed = feedparser.parse(url)
            return parsed_feed
        except:
            self.log.error('Failed to parse feed: %s'%url)
            return false


    def parse_feeds(self):
        feeds = self.get_table('feeds')
        for feed in feeds:
            parsed_feed = self.parse_feed(feed['feed_url'])
            if parsed_feed:
                for entry in parsed_feed.entries:
                    sys.exit
                    if not self.check_in_table('entries', 'hash', str(self.get_hash(entry['title'] + entry['summary']))):
                        self.add_entry(entry, feed['feed_url'])


    def sanitize(self, var):
        # Strip file from blanks and newlines
        var = var.strip()
        return var


    def decode(self, data):
        data = data.decode('utf-8')
        return data


    def encode(self, data):
        data = data.encode('utf-8')
        return data


    def add_feed(self, feed):
        self.log.info('Adding feed: %s'%feed[0])
        feed_insert = {}
        parsed_feed = self.parse_feed(feed[0])
        if parsed_feed:
            feed_insert['hash'] = str(self.get_hash(feed[0]))
            feed_insert['date_entered'] = str(self.get_timestamp())
            feed_insert['feed_url'] = str(feed[0])
            feed_insert['icon_url'] = 'None'
            feed_insert['last_updated'] = 'None'
            feed_insert['groups'] = feed[1]

            if 'title' in parsed_feed.feed.keys():
                feed_insert['title'] = str(parsed_feed.feed['title'])
            else:
                feed_insert['title'] = str(feed[0])

            self.insert_row('feeds', feed_insert)


    def add_entry(self, entry, url):
        self.log.info('Inserting new entry: %s'%entry['title'])
        entry_insert = {}
        entry_insert['hash']            = str(self.get_hash(entry['title'] + entry['summary']))
        entry_insert['content']         = str(entry['summary'])
        entry_insert['entry_url']       = str(entry['link'])
        entry_insert['read']            = 'False'
        entry_insert['date_entered']    = str(self.get_timestamp())
        entry_insert['feed_hash']       = str(self.get_hash(url))

        if 'title' in entry.keys():
            entry_insert['title']           = str(entry['title'])
        else:
            entry_insert['title']           = str(entry['link'])

        if 'published' in entry.keys():
            entry_insert['date_published'] = str(entry.published)
        else:
            entry_insert['date_published'] = 'unknown'

        self.insert_row('entries', entry_insert)


    def mark_read(self, feed):
        self.log.info('Marking feed read: %s'%feed['title'])
        self.update_row('entries', 'read', 'True', feed['hash'])


    def init(self):
        self.create_tables()

        for feed in self.config.feeds:
            if not self.check_in_table('feeds', 'hash', str(self.get_hash(feed[0]))):
                self.add_feed(feed)


    def usage(self):
        self.log.info('Usage')


    def run(self):
        self.init()

        if len(sys.argv) > 1:
            if sys.argv[1] == '--mark-all-read':
                feeds = self.get_table('feeds')
                for feed in feeds:
                    self.mark_read(feed)

            elif sys.argv[1] == '--gen-html':
                self.generate_HTML()
                sys.exit()
            else:
                self.usage()

        self.parse_feeds()
        self.generate_HTML()


app = RSS()
app.run()
